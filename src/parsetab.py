
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PrightASSIGNleftNEnonassocLTGTleftPLUSMINUSleftTIMESDIVIDEleftLBRACERBRACEleftLPARENRPARENleftCTEFCTEIAND ASSIGN CHAR CLASS COMMA CTECH CTEF CTEI DERIVES DIVIDE ELSE EQ FLOAT FUNC GT GTE ID IF IMPORT INT LBRACE LPAREN LSBRACKET LT LTE MINUS NE NOT OR PLUS POINT PRINT PROGRAM RBRACE READ RETURN RPAREN RSBRACKET SEMICOLON TIMES VAR VOID WHILEP            : PROGRAM ID SEMICOLON P_STRUCTURE endProgramP_STRUCTURE  : P_STR_ONE PROG_MEMBERS PROG_M_ONEP_STR_ONE    : LIBS_DECLARATION\n                    | emptyPROG_MEMBERS : CLASS_STR\n                    | FUNCTION\n                    | DEC_VARPROG_M_ONE   : PROG_MEMBERS PROG_M_ONE\n                    | emptyLIBS_DECLARATION : LIB LIB_ONELIB_ONE      : LIB LIB_ONE\n                    | emptyLIB          : IMPORT ID SEMICOLONCLASS_STR    : CLASS_DEC LBRACE CLASS_BODY RBRACECLASS_DEC    : CLASS ID CLASS_DEC_ONECLASS_DEC_ONE    : CLASS_INHERITS\n                        | emptyCLASS_INHERITS   : DERIVES IDCLASS_BODY       : CLASS_CONSTRUCTOR CLASS_BODY_MEMBER CLASS_B_M_ONECLASS_B_M_ONE    : CLASS_BODY_MEMBER CLASS_B_M_ONE\n                        | emptyCLASS_BODY_MEMBER    : FUNCTION\n                            | DEC_VARCLASS_CONSTRUCTOR    : ID LPAREN CLASS_C_ONE RPAREN BLOCKCLASS_C_ONE          : PARAM\n                            | emptyFIELD_ACCESS         : ID POINT IDFUNCTION_ACCESS      : ID POINT FUNCTION_CALLFUNCTION_CALL        : ID LPAREN EXP FUNCTION_C_ONE RPARENFUNCTION_C_ONE       : COMMA EXP FUNCTIONFUNCTION_DEC         : FUNC FUNCTION_D_ONE ID addFunc LPAREN FUNCTION_D_TWO RPARENFUNCTION             : FUNCTION_DEC BLOCKFUNCTION_D_ONE       : SIMPLE_TYPE\n                            | VOIDFUNCTION_D_TWO       : PARAM\n                            | emptyPARAM                : SIMPLE_TYPE ID PARAM_ONEPARAM_ONE            : COMMA PARAM\n                            | emptyVARIABLE             : ID VARIABLE_ONE\n                            | FIELD_ACCESSVARIABLE_ONE         : LSBRACKET EXP RSBRACKET VARIABLE_ONE\n                            | emptyASSIGN_OP            : VARIABLE ASSIGN EXP SEMICOLONDEC_VAR              : VAR DEC_VAR_ONE SEMICOLONDEC_VAR_ONE          : COMPLEX_TYPE ID DEC_V_O_COMPLEX\n                            | SIMPLE_TYPE ID addVar DEC_ARR DEC_V_O_SIMPLEDEC_V_O_SIMPLE       : COMMA ID addVar DEC_ARR DEC_V_O_SIMPLE\n                            | emptyDEC_ARR              : LSBRACKET CTEI RSBRACKET DEC_ARR_ONE\n                            | emptyDEC_ARR_ONE          : LSBRACKET CTEI RSBRACKET\n                            | emptyDEC_V_O_COMPLEX      : COMMA ID DEC_V_O_COMPLEX\n                            | emptySIMPLE_TYPE          : INT \n                            | FLOAT \n                            | CHARCOMPLEX_TYPE         : IDEXP          : T_EXP logicalOrOperation EXP_ONEEXP_ONE      : OR pushOperador EXP\n                    | emptyT_EXP        : G_EXP logicalAndOperation T_EXP_ONET_EXP_ONE    : AND pushOperador T_EXP\n                    | emptyG_EXP        : MID_EXP relationalOperation G_EXP_ONEG_EXP_ONE    : G_EXP_TWO G_EXP\n                    | emptyG_EXP_TWO    : LT pushOperador\n                    | GT pushOperador\n                    | NE pushOperador\n                    | EQ pushOperador\n                    | GTE pushOperador\n                    | LTE pushOperadorMID_EXP      : TERM plusMinusExp MID_EXP_ONEMID_EXP_ONE  : PLUS pushOperador MID_EXP\n                    | MINUS pushOperador MID_EXP\n                    | emptyTERM         : FACT timesDivideExp TERM_ONETERM_ONE     : TIMES pushOperador TERM\n                    | DIVIDE pushOperador TERM\n                    | emptyFACT         : CONST \n                    | VARIABLE \n                    | FUNCTION_CALL \n                    | LPAREN EXP RPARENCONST        : CTEI pushInt\n                    | CTEF pushFloat\n                    | CTECH pushCharBLOCK        : LBRACE BLOCK_ONE RBRACEBLOCK_ONE    : BLOCK_STMT BLOCK_ONE\n                    | emptyBLOCK_STMT   : STMT\n                    | DEC_VARSTMT         : ASSIGN_OP \n                    | FUNCTION_CALL \n                    | READ_FUNC \n                    | PRINT_FUNC \n                    | COND \n                    | WHILE_LOOP\n                    | RETURN_FUNCRETURN_FUNC      : RETURN RETURN_F_ONE SEMICOLONRETURN_F_ONE     : VARIABLE\n                        | EXP\n                        | emptyPRINT_FUNC       : PRINT LPAREN EXP RPAREN SEMICOLONREAD_FUNC        : READ VARIABLE SEMICOLONWHILE_LOOP     : WHILE whilePreExp LPAREN EXP RPAREN whilePostExp NESTED_BLOCK endWhileCOND             : IF LPAREN EXP RPAREN condExp NESTED_BLOCK COND_ONE condEndCOND_ONE         : condElse ELSE NESTED_BLOCK\n                        | emptyNESTED_BLOCK     : LBRACE NESTED_B_ONE RBRACENESTED_B_ONE     : STMT NESTED_B_ONE\n                        | emptyendProgram       :addVar           : pushOperador     : pushInt         :pushFloat        :pushChar         :plusMinusExp      : timesDivideExp      : relationalOperation  :logicalOrOperation     :logicalAndOperation     :condExp          :condElse         :condEnd          :whilePreExp          :whilePostExp         :endWhile             :addFunc          : readFunc         :empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,11,12,13,14,15,25,26,27,29,44,68,76,81,],[0,-115,-1,-134,-5,-6,-7,-134,-2,-9,-32,-8,-45,-14,-90,]),'ID':([2,10,18,19,28,30,32,33,34,35,36,37,39,40,41,49,51,52,53,54,55,56,57,58,59,62,66,68,74,83,84,86,87,91,92,106,111,122,129,132,133,151,153,159,162,165,167,168,169,170,171,172,174,175,178,179,184,194,197,200,201,203,204,205,206,207,208,209,210,211,212,218,219,231,233,235,237,240,242,244,247,],[3,24,33,38,47,61,69,-59,70,-56,-57,-58,75,-33,-34,61,-93,-94,-95,-96,-97,-98,-99,-100,-101,90,98,-45,114,125,125,127,125,125,125,125,143,150,-107,125,-102,-44,125,-117,-117,125,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,213,-29,-106,125,125,-69,-70,-71,-72,-73,-74,125,125,125,125,-134,61,-128,-111,61,-131,-109,-112,-108,-110,]),'SEMICOLON':([3,24,31,66,67,69,70,85,88,89,90,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,112,113,123,124,125,127,134,135,136,137,138,140,141,142,143,144,146,154,155,158,160,161,163,164,166,173,176,177,180,181,182,183,185,194,196,202,213,214,221,222,223,224,225,226,227,229,230,238,245,246,],[4,43,68,-134,-41,-134,-116,-40,-43,129,-134,133,-84,-104,-105,-134,-124,-125,-123,-121,-122,-83,-85,-118,-119,-120,-46,-55,-134,-84,151,-134,-27,-134,-134,-134,-134,-134,-87,-88,-89,-134,-134,-51,-134,197,-60,-62,-63,-65,-66,-68,-75,-78,-79,-82,-86,-54,-47,-49,-29,-42,-67,-116,-134,-61,-64,-76,-77,-80,-81,-134,-50,-53,-134,-48,-52,]),'VAR':([4,6,7,8,9,12,13,14,15,21,22,23,25,29,30,42,43,46,49,51,52,53,54,55,56,57,58,59,68,76,77,78,79,81,116,129,133,151,190,194,197,218,231,233,237,240,242,244,247,],[-134,18,-3,-4,-134,18,-5,-6,-7,-134,-10,-12,18,-32,18,-11,-13,18,18,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-14,18,-22,-23,-90,18,-107,-102,-44,-24,-29,-106,-134,-128,-111,-131,-109,-112,-108,-110,]),'CLASS':([4,6,7,8,9,12,13,14,15,21,22,23,25,29,42,43,68,76,81,],[-134,19,-3,-4,-134,19,-5,-6,-7,-134,-10,-12,19,-32,-11,-13,-45,-14,-90,]),'FUNC':([4,6,7,8,9,12,13,14,15,21,22,23,25,29,42,43,46,67,68,76,77,78,79,81,85,88,99,100,101,102,103,104,105,107,108,109,116,123,125,127,134,135,136,137,138,140,141,142,154,158,160,161,163,164,166,173,176,177,180,181,190,194,195,196,202,221,222,223,224,225,226,],[-134,20,-3,-4,-134,20,-5,-6,-7,-134,-10,-12,20,-32,-11,-13,20,-41,-45,-14,20,-22,-23,-90,-40,-43,-124,-125,-123,-121,-122,-83,-85,-118,-119,-120,20,-84,-134,-27,-134,-134,-134,-134,-134,-87,-88,-89,-134,-60,-62,-63,-65,-66,-68,-75,-78,-79,-82,-86,-24,-29,20,-42,-67,-61,-64,-76,-77,-80,-81,]),'IMPORT':([4,9,21,43,],[10,10,10,-13,]),'LBRACE':([16,17,38,71,72,73,114,149,156,198,199,215,220,241,],[28,30,-134,-15,-16,-17,-18,30,-126,219,-130,-31,219,219,]),'INT':([18,20,80,147,192,],[35,35,35,35,35,]),'FLOAT':([18,20,80,147,192,],[36,36,36,36,36,]),'CHAR':([18,20,80,147,192,],[37,37,37,37,37,]),'VOID':([20,],[41,]),'RBRACE':([29,30,45,48,49,50,51,52,53,54,55,56,57,58,59,68,77,78,79,81,82,116,117,118,129,133,148,151,194,197,218,219,231,233,234,235,236,237,240,242,243,244,247,],[-32,-134,76,81,-134,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-134,-22,-23,-90,-91,-134,-19,-21,-107,-102,-20,-44,-29,-106,-134,-134,-128,-111,242,-134,-114,-131,-109,-112,-113,-108,-110,]),'RPAREN':([29,67,80,81,85,88,99,100,101,102,103,104,105,107,108,109,119,120,121,123,125,127,130,131,134,135,136,137,138,139,140,141,142,147,150,152,154,157,158,160,161,163,164,166,173,176,177,180,181,187,188,189,191,193,194,196,202,216,217,221,222,223,224,225,226,],[-32,-41,-134,-90,-40,-43,-124,-125,-123,-121,-122,-83,-85,-118,-119,-120,149,-25,-26,-84,-134,-27,155,156,-134,-134,-134,-134,-134,181,-87,-88,-89,-134,-134,194,-134,199,-60,-62,-63,-65,-66,-68,-75,-78,-79,-82,-86,215,-35,-36,-37,-39,-29,-42,-67,-38,-30,-61,-64,-76,-77,-80,-81,]),'READ':([30,49,51,52,53,54,55,56,57,58,59,68,129,133,151,194,197,218,219,231,233,235,237,240,242,244,247,],[62,62,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-107,-102,-44,-29,-106,-134,62,-128,-111,62,-131,-109,-112,-108,-110,]),'PRINT':([30,49,51,52,53,54,55,56,57,58,59,68,129,133,151,194,197,218,219,231,233,235,237,240,242,244,247,],[63,63,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-107,-102,-44,-29,-106,-134,63,-128,-111,63,-131,-109,-112,-108,-110,]),'IF':([30,49,51,52,53,54,55,56,57,58,59,68,129,133,151,194,197,218,219,231,233,235,237,240,242,244,247,],[64,64,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-107,-102,-44,-29,-106,-134,64,-128,-111,64,-131,-109,-112,-108,-110,]),'WHILE':([30,49,51,52,53,54,55,56,57,58,59,68,129,133,151,194,197,218,219,231,233,235,237,240,242,244,247,],[65,65,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-107,-102,-44,-29,-106,-134,65,-128,-111,65,-131,-109,-112,-108,-110,]),'RETURN':([30,49,51,52,53,54,55,56,57,58,59,68,129,133,151,194,197,218,219,231,233,235,237,240,242,244,247,],[66,66,-93,-94,-95,-96,-97,-98,-99,-100,-101,-45,-107,-102,-44,-29,-106,-134,66,-128,-111,66,-131,-109,-112,-108,-110,]),'DERIVES':([38,],[74,]),'LPAREN':([47,61,63,64,65,66,75,83,84,87,91,92,93,98,106,115,125,132,153,159,162,165,167,168,169,170,171,172,174,175,178,179,200,201,203,204,205,206,207,208,209,210,211,212,],[80,84,91,92,-129,106,-132,106,106,106,106,106,132,84,106,147,84,106,106,-117,-117,106,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,106,106,-69,-70,-71,-72,-73,-74,106,106,106,106,]),'ASSIGN':([60,61,67,85,88,127,154,196,],[83,-134,-41,-40,-43,-27,-134,-42,]),'POINT':([61,90,98,125,],[86,86,86,86,]),'LSBRACKET':([61,70,90,98,113,125,154,213,214,227,],[87,-116,87,87,145,87,87,-116,228,145,]),'CTEI':([66,83,84,87,91,92,106,132,145,153,159,162,165,167,168,169,170,171,172,174,175,178,179,200,201,203,204,205,206,207,208,209,210,211,212,228,],[107,107,107,107,107,107,107,107,186,107,-117,-117,107,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,107,107,-69,-70,-71,-72,-73,-74,107,107,107,107,239,]),'CTEF':([66,83,84,87,91,92,106,132,153,159,162,165,167,168,169,170,171,172,174,175,178,179,200,201,203,204,205,206,207,208,209,210,211,212,],[108,108,108,108,108,108,108,108,108,-117,-117,108,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,108,108,-69,-70,-71,-72,-73,-74,108,108,108,108,]),'CTECH':([66,83,84,87,91,92,106,132,153,159,162,165,167,168,169,170,171,172,174,175,178,179,200,201,203,204,205,206,207,208,209,210,211,212,],[109,109,109,109,109,109,109,109,109,-117,-117,109,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,109,109,-69,-70,-71,-72,-73,-74,109,109,109,109,]),'TIMES':([67,85,88,95,98,103,104,105,107,108,109,123,125,127,138,140,141,142,154,181,194,196,],[-41,-40,-43,-84,-134,-122,-83,-85,-118,-119,-120,-84,-134,-27,178,-87,-88,-89,-134,-86,-29,-42,]),'DIVIDE':([67,85,88,95,98,103,104,105,107,108,109,123,125,127,138,140,141,142,154,181,194,196,],[-41,-40,-43,-84,-134,-122,-83,-85,-118,-119,-120,-84,-134,-27,179,-87,-88,-89,-134,-86,-29,-42,]),'PLUS':([67,85,88,95,98,102,103,104,105,107,108,109,123,125,127,137,138,140,141,142,154,177,180,181,194,196,225,226,],[-41,-40,-43,-84,-134,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,174,-134,-87,-88,-89,-134,-79,-82,-86,-29,-42,-80,-81,]),'MINUS':([67,85,88,95,98,102,103,104,105,107,108,109,123,125,127,137,138,140,141,142,154,177,180,181,194,196,225,226,],[-41,-40,-43,-84,-134,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,175,-134,-87,-88,-89,-134,-79,-82,-86,-29,-42,-80,-81,]),'LT':([67,85,88,95,98,101,102,103,104,105,107,108,109,123,125,127,136,137,138,140,141,142,154,173,176,177,180,181,194,196,223,224,225,226,],[-41,-40,-43,-84,-134,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,167,-134,-134,-87,-88,-89,-134,-75,-78,-79,-82,-86,-29,-42,-76,-77,-80,-81,]),'GT':([67,85,88,95,98,101,102,103,104,105,107,108,109,123,125,127,136,137,138,140,141,142,154,173,176,177,180,181,194,196,223,224,225,226,],[-41,-40,-43,-84,-134,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,168,-134,-134,-87,-88,-89,-134,-75,-78,-79,-82,-86,-29,-42,-76,-77,-80,-81,]),'NE':([67,85,88,95,98,101,102,103,104,105,107,108,109,123,125,127,136,137,138,140,141,142,154,173,176,177,180,181,194,196,223,224,225,226,],[-41,-40,-43,-84,-134,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,169,-134,-134,-87,-88,-89,-134,-75,-78,-79,-82,-86,-29,-42,-76,-77,-80,-81,]),'EQ':([67,85,88,95,98,101,102,103,104,105,107,108,109,123,125,127,136,137,138,140,141,142,154,173,176,177,180,181,194,196,223,224,225,226,],[-41,-40,-43,-84,-134,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,170,-134,-134,-87,-88,-89,-134,-75,-78,-79,-82,-86,-29,-42,-76,-77,-80,-81,]),'GTE':([67,85,88,95,98,101,102,103,104,105,107,108,109,123,125,127,136,137,138,140,141,142,154,173,176,177,180,181,194,196,223,224,225,226,],[-41,-40,-43,-84,-134,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,171,-134,-134,-87,-88,-89,-134,-75,-78,-79,-82,-86,-29,-42,-76,-77,-80,-81,]),'LTE':([67,85,88,95,98,101,102,103,104,105,107,108,109,123,125,127,136,137,138,140,141,142,154,173,176,177,180,181,194,196,223,224,225,226,],[-41,-40,-43,-84,-134,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,172,-134,-134,-87,-88,-89,-134,-75,-78,-79,-82,-86,-29,-42,-76,-77,-80,-81,]),'AND':([67,85,88,95,98,100,101,102,103,104,105,107,108,109,123,125,127,135,136,137,138,140,141,142,154,164,166,173,176,177,180,181,194,196,202,223,224,225,226,],[-41,-40,-43,-84,-134,-125,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,162,-134,-134,-134,-87,-88,-89,-134,-66,-68,-75,-78,-79,-82,-86,-29,-42,-67,-76,-77,-80,-81,]),'OR':([67,85,88,95,98,99,100,101,102,103,104,105,107,108,109,123,125,127,134,135,136,137,138,140,141,142,154,161,163,164,166,173,176,177,180,181,194,196,202,222,223,224,225,226,],[-41,-40,-43,-84,-134,-124,-125,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,159,-134,-134,-134,-134,-87,-88,-89,-134,-63,-65,-66,-68,-75,-78,-79,-82,-86,-29,-42,-67,-64,-76,-77,-80,-81,]),'COMMA':([67,69,70,85,88,99,100,101,102,103,104,105,107,108,109,113,123,125,126,127,134,135,136,137,138,140,141,142,143,144,146,150,154,158,160,161,163,164,166,173,176,177,180,181,194,196,202,213,214,221,222,223,224,225,226,227,229,230,238,246,],[-41,111,-116,-40,-43,-124,-125,-123,-121,-122,-83,-85,-118,-119,-120,-134,-84,-134,153,-27,-134,-134,-134,-134,-134,-87,-88,-89,111,184,-51,192,-134,-60,-62,-63,-65,-66,-68,-75,-78,-79,-82,-86,-29,-42,-67,-116,-134,-61,-64,-76,-77,-80,-81,-134,-50,-53,184,-52,]),'RSBRACKET':([67,85,88,99,100,101,102,103,104,105,107,108,109,123,125,127,128,134,135,136,137,138,140,141,142,154,158,160,161,163,164,166,173,176,177,180,181,186,194,196,202,221,222,223,224,225,226,239,],[-41,-40,-43,-124,-125,-123,-121,-122,-83,-85,-118,-119,-120,-84,-134,-27,154,-134,-134,-134,-134,-134,-87,-88,-89,-134,-60,-62,-63,-65,-66,-68,-75,-78,-79,-82,-86,214,-29,-42,-67,-61,-64,-76,-77,-80,-81,246,]),'ELSE':([218,232,242,],[-127,241,-112,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'P':([0,],[1,]),'P_STRUCTURE':([4,],[5,]),'P_STR_ONE':([4,],[6,]),'LIBS_DECLARATION':([4,],[7,]),'empty':([4,9,12,21,25,30,38,49,61,66,69,77,80,90,98,113,116,125,134,135,136,137,138,143,144,147,150,154,214,218,219,227,235,238,],[8,23,27,23,27,50,73,50,88,97,112,118,121,88,88,146,118,88,160,163,166,176,180,112,185,189,193,88,230,233,236,146,236,185,]),'LIB':([4,9,21,],[9,21,21,]),'endProgram':([5,],[11,]),'PROG_MEMBERS':([6,12,25,],[12,25,25,]),'CLASS_STR':([6,12,25,],[13,13,13,]),'FUNCTION':([6,12,25,46,77,116,195,],[14,14,14,78,78,78,217,]),'DEC_VAR':([6,12,25,30,46,49,77,116,],[15,15,15,52,79,52,79,79,]),'CLASS_DEC':([6,12,25,],[16,16,16,]),'FUNCTION_DEC':([6,12,25,46,77,116,195,],[17,17,17,17,17,17,17,]),'LIB_ONE':([9,21,],[22,42,]),'PROG_M_ONE':([12,25,],[26,44,]),'BLOCK':([17,149,],[29,190,]),'DEC_VAR_ONE':([18,],[31,]),'COMPLEX_TYPE':([18,],[32,]),'SIMPLE_TYPE':([18,20,80,147,192,],[34,40,122,122,122,]),'FUNCTION_D_ONE':([20,],[39,]),'CLASS_BODY':([28,],[45,]),'CLASS_CONSTRUCTOR':([28,],[46,]),'BLOCK_ONE':([30,49,],[48,82,]),'BLOCK_STMT':([30,49,],[49,49,]),'STMT':([30,49,219,235,],[51,51,235,235,]),'ASSIGN_OP':([30,49,219,235,],[53,53,53,53,]),'FUNCTION_CALL':([30,49,66,83,84,87,91,92,106,132,153,165,200,201,209,210,211,212,219,235,],[54,54,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,54,54,]),'READ_FUNC':([30,49,219,235,],[55,55,55,55,]),'PRINT_FUNC':([30,49,219,235,],[56,56,56,56,]),'COND':([30,49,219,235,],[57,57,57,57,]),'WHILE_LOOP':([30,49,219,235,],[58,58,58,58,]),'RETURN_FUNC':([30,49,219,235,],[59,59,59,59,]),'VARIABLE':([30,49,62,66,83,84,87,91,92,106,132,153,165,200,201,209,210,211,212,219,235,],[60,60,89,95,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,60,60,]),'FIELD_ACCESS':([30,49,62,66,83,84,87,91,92,106,132,153,165,200,201,209,210,211,212,219,235,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'CLASS_DEC_ONE':([38,],[71,]),'CLASS_INHERITS':([38,],[72,]),'CLASS_BODY_MEMBER':([46,77,116,],[77,116,116,]),'VARIABLE_ONE':([61,90,98,125,154,],[85,85,85,85,196,]),'whilePreExp':([65,],[93,]),'RETURN_F_ONE':([66,],[94,]),'EXP':([66,83,84,87,91,92,106,132,153,200,],[96,124,126,128,130,131,139,157,195,221,]),'T_EXP':([66,83,84,87,91,92,106,132,153,200,201,],[99,99,99,99,99,99,99,99,99,99,222,]),'G_EXP':([66,83,84,87,91,92,106,132,153,165,200,201,],[100,100,100,100,100,100,100,100,100,202,100,100,]),'MID_EXP':([66,83,84,87,91,92,106,132,153,165,200,201,209,210,],[101,101,101,101,101,101,101,101,101,101,101,101,223,224,]),'TERM':([66,83,84,87,91,92,106,132,153,165,200,201,209,210,211,212,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,225,226,]),'FACT':([66,83,84,87,91,92,106,132,153,165,200,201,209,210,211,212,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'CONST':([66,83,84,87,91,92,106,132,153,165,200,201,209,210,211,212,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'DEC_V_O_COMPLEX':([69,143,],[110,182,]),'addVar':([70,213,],[113,227,]),'addFunc':([75,],[115,]),'CLASS_B_M_ONE':([77,116,],[117,148,]),'CLASS_C_ONE':([80,],[119,]),'PARAM':([80,147,192,],[120,188,216,]),'logicalOrOperation':([99,],[134,]),'logicalAndOperation':([100,],[135,]),'relationalOperation':([101,],[136,]),'plusMinusExp':([102,],[137,]),'timesDivideExp':([103,],[138,]),'pushInt':([107,],[140,]),'pushFloat':([108,],[141,]),'pushChar':([109,],[142,]),'DEC_ARR':([113,227,],[144,238,]),'FUNCTION_C_ONE':([126,],[152,]),'EXP_ONE':([134,],[158,]),'T_EXP_ONE':([135,],[161,]),'G_EXP_ONE':([136,],[164,]),'G_EXP_TWO':([136,],[165,]),'MID_EXP_ONE':([137,],[173,]),'TERM_ONE':([138,],[177,]),'DEC_V_O_SIMPLE':([144,238,],[183,245,]),'FUNCTION_D_TWO':([147,],[187,]),'PARAM_ONE':([150,],[191,]),'condExp':([156,],[198,]),'pushOperador':([159,162,167,168,169,170,171,172,174,175,178,179,],[200,201,203,204,205,206,207,208,209,210,211,212,]),'NESTED_BLOCK':([198,220,241,],[218,237,247,]),'whilePostExp':([199,],[220,]),'DEC_ARR_ONE':([214,],[229,]),'COND_ONE':([218,],[231,]),'condElse':([218,],[232,]),'NESTED_B_ONE':([219,235,],[234,243,]),'condEnd':([231,],[240,]),'endWhile':([237,],[244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> P","S'",1,None,None,None),
  ('P -> PROGRAM ID SEMICOLON P_STRUCTURE endProgram','P',5,'p_PROGRAM','parser.py',47),
  ('P_STRUCTURE -> P_STR_ONE PROG_MEMBERS PROG_M_ONE','P_STRUCTURE',3,'p_P_STRUCTURE','parser.py',50),
  ('P_STR_ONE -> LIBS_DECLARATION','P_STR_ONE',1,'p_P_STR_ONE','parser.py',53),
  ('P_STR_ONE -> empty','P_STR_ONE',1,'p_P_STR_ONE','parser.py',54),
  ('PROG_MEMBERS -> CLASS_STR','PROG_MEMBERS',1,'p_PROG_MEMBERS','parser.py',57),
  ('PROG_MEMBERS -> FUNCTION','PROG_MEMBERS',1,'p_PROG_MEMBERS','parser.py',58),
  ('PROG_MEMBERS -> DEC_VAR','PROG_MEMBERS',1,'p_PROG_MEMBERS','parser.py',59),
  ('PROG_M_ONE -> PROG_MEMBERS PROG_M_ONE','PROG_M_ONE',2,'p_PROG_M_ONE','parser.py',62),
  ('PROG_M_ONE -> empty','PROG_M_ONE',1,'p_PROG_M_ONE','parser.py',63),
  ('LIBS_DECLARATION -> LIB LIB_ONE','LIBS_DECLARATION',2,'p_LIBS_DECLARATION','parser.py',66),
  ('LIB_ONE -> LIB LIB_ONE','LIB_ONE',2,'p_LIB_ONE','parser.py',69),
  ('LIB_ONE -> empty','LIB_ONE',1,'p_LIB_ONE','parser.py',70),
  ('LIB -> IMPORT ID SEMICOLON','LIB',3,'p_LIB','parser.py',73),
  ('CLASS_STR -> CLASS_DEC LBRACE CLASS_BODY RBRACE','CLASS_STR',4,'p_CLASS','parser.py',78),
  ('CLASS_DEC -> CLASS ID CLASS_DEC_ONE','CLASS_DEC',3,'p_CLASS_DEC','parser.py',81),
  ('CLASS_DEC_ONE -> CLASS_INHERITS','CLASS_DEC_ONE',1,'p_CLASS_DEC_ONE','parser.py',84),
  ('CLASS_DEC_ONE -> empty','CLASS_DEC_ONE',1,'p_CLASS_DEC_ONE','parser.py',85),
  ('CLASS_INHERITS -> DERIVES ID','CLASS_INHERITS',2,'p_CLASS_INHERITS','parser.py',88),
  ('CLASS_BODY -> CLASS_CONSTRUCTOR CLASS_BODY_MEMBER CLASS_B_M_ONE','CLASS_BODY',3,'p_CLASS_BODY','parser.py',91),
  ('CLASS_B_M_ONE -> CLASS_BODY_MEMBER CLASS_B_M_ONE','CLASS_B_M_ONE',2,'p_CLASS_B_M_ONE','parser.py',94),
  ('CLASS_B_M_ONE -> empty','CLASS_B_M_ONE',1,'p_CLASS_B_M_ONE','parser.py',95),
  ('CLASS_BODY_MEMBER -> FUNCTION','CLASS_BODY_MEMBER',1,'p_CLASS_BODY_MEMBER','parser.py',98),
  ('CLASS_BODY_MEMBER -> DEC_VAR','CLASS_BODY_MEMBER',1,'p_CLASS_BODY_MEMBER','parser.py',99),
  ('CLASS_CONSTRUCTOR -> ID LPAREN CLASS_C_ONE RPAREN BLOCK','CLASS_CONSTRUCTOR',5,'p_CLASS_CONSTRUCTOR','parser.py',102),
  ('CLASS_C_ONE -> PARAM','CLASS_C_ONE',1,'p_CLASS_C_ONE','parser.py',105),
  ('CLASS_C_ONE -> empty','CLASS_C_ONE',1,'p_CLASS_C_ONE','parser.py',106),
  ('FIELD_ACCESS -> ID POINT ID','FIELD_ACCESS',3,'p_FIELD_ACCESS','parser.py',109),
  ('FUNCTION_ACCESS -> ID POINT FUNCTION_CALL','FUNCTION_ACCESS',3,'p_FUNCTION_ACCESS','parser.py',114),
  ('FUNCTION_CALL -> ID LPAREN EXP FUNCTION_C_ONE RPAREN','FUNCTION_CALL',5,'p_FUNCTION_CALL','parser.py',117),
  ('FUNCTION_C_ONE -> COMMA EXP FUNCTION','FUNCTION_C_ONE',3,'p_FUNCTION_C_ONE','parser.py',120),
  ('FUNCTION_DEC -> FUNC FUNCTION_D_ONE ID addFunc LPAREN FUNCTION_D_TWO RPAREN','FUNCTION_DEC',7,'p_FUNCTION_DEC','parser.py',123),
  ('FUNCTION -> FUNCTION_DEC BLOCK','FUNCTION',2,'p_FUNCTION','parser.py',127),
  ('FUNCTION_D_ONE -> SIMPLE_TYPE','FUNCTION_D_ONE',1,'p_FUNCTION_D_ONE','parser.py',130),
  ('FUNCTION_D_ONE -> VOID','FUNCTION_D_ONE',1,'p_FUNCTION_D_ONE','parser.py',131),
  ('FUNCTION_D_TWO -> PARAM','FUNCTION_D_TWO',1,'p_FUNCTION_D_TWO','parser.py',138),
  ('FUNCTION_D_TWO -> empty','FUNCTION_D_TWO',1,'p_FUNCTION_D_TWO','parser.py',139),
  ('PARAM -> SIMPLE_TYPE ID PARAM_ONE','PARAM',3,'p_PARAM','parser.py',142),
  ('PARAM_ONE -> COMMA PARAM','PARAM_ONE',2,'p_PARAM_ONE','parser.py',146),
  ('PARAM_ONE -> empty','PARAM_ONE',1,'p_PARAM_ONE','parser.py',147),
  ('VARIABLE -> ID VARIABLE_ONE','VARIABLE',2,'p_VARIABLE','parser.py',152),
  ('VARIABLE -> FIELD_ACCESS','VARIABLE',1,'p_VARIABLE','parser.py',153),
  ('VARIABLE_ONE -> LSBRACKET EXP RSBRACKET VARIABLE_ONE','VARIABLE_ONE',4,'p_VARIABLE_ONE','parser.py',161),
  ('VARIABLE_ONE -> empty','VARIABLE_ONE',1,'p_VARIABLE_ONE','parser.py',162),
  ('ASSIGN_OP -> VARIABLE ASSIGN EXP SEMICOLON','ASSIGN_OP',4,'p_ASSIGN_OP','parser.py',165),
  ('DEC_VAR -> VAR DEC_VAR_ONE SEMICOLON','DEC_VAR',3,'p_DEC_VAR','parser.py',178),
  ('DEC_VAR_ONE -> COMPLEX_TYPE ID DEC_V_O_COMPLEX','DEC_VAR_ONE',3,'p_DEC_VAR_ONE','parser.py',181),
  ('DEC_VAR_ONE -> SIMPLE_TYPE ID addVar DEC_ARR DEC_V_O_SIMPLE','DEC_VAR_ONE',5,'p_DEC_VAR_ONE','parser.py',182),
  ('DEC_V_O_SIMPLE -> COMMA ID addVar DEC_ARR DEC_V_O_SIMPLE','DEC_V_O_SIMPLE',5,'p_DEC_V_O_SIMPLE','parser.py',185),
  ('DEC_V_O_SIMPLE -> empty','DEC_V_O_SIMPLE',1,'p_DEC_V_O_SIMPLE','parser.py',186),
  ('DEC_ARR -> LSBRACKET CTEI RSBRACKET DEC_ARR_ONE','DEC_ARR',4,'p_DEC_ARR','parser.py',189),
  ('DEC_ARR -> empty','DEC_ARR',1,'p_DEC_ARR','parser.py',190),
  ('DEC_ARR_ONE -> LSBRACKET CTEI RSBRACKET','DEC_ARR_ONE',3,'p_DEC_ARR_ONE','parser.py',193),
  ('DEC_ARR_ONE -> empty','DEC_ARR_ONE',1,'p_DEC_ARR_ONE','parser.py',194),
  ('DEC_V_O_COMPLEX -> COMMA ID DEC_V_O_COMPLEX','DEC_V_O_COMPLEX',3,'p_DEC_V_O_COMPLEX','parser.py',197),
  ('DEC_V_O_COMPLEX -> empty','DEC_V_O_COMPLEX',1,'p_DEC_V_O_COMPLEX','parser.py',198),
  ('SIMPLE_TYPE -> INT','SIMPLE_TYPE',1,'p_SIMPLE_TYPE','parser.py',201),
  ('SIMPLE_TYPE -> FLOAT','SIMPLE_TYPE',1,'p_SIMPLE_TYPE','parser.py',202),
  ('SIMPLE_TYPE -> CHAR','SIMPLE_TYPE',1,'p_SIMPLE_TYPE','parser.py',203),
  ('COMPLEX_TYPE -> ID','COMPLEX_TYPE',1,'p_COMPLEX_TYPE','parser.py',212),
  ('EXP -> T_EXP logicalOrOperation EXP_ONE','EXP',3,'p_EXP','parser.py',217),
  ('EXP_ONE -> OR pushOperador EXP','EXP_ONE',3,'p_EXP_ONE','parser.py',220),
  ('EXP_ONE -> empty','EXP_ONE',1,'p_EXP_ONE','parser.py',221),
  ('T_EXP -> G_EXP logicalAndOperation T_EXP_ONE','T_EXP',3,'p_T_EXP','parser.py',224),
  ('T_EXP_ONE -> AND pushOperador T_EXP','T_EXP_ONE',3,'p_T_EXP_ONE','parser.py',227),
  ('T_EXP_ONE -> empty','T_EXP_ONE',1,'p_T_EXP_ONE','parser.py',228),
  ('G_EXP -> MID_EXP relationalOperation G_EXP_ONE','G_EXP',3,'p_G_EXP','parser.py',231),
  ('G_EXP_ONE -> G_EXP_TWO G_EXP','G_EXP_ONE',2,'p_G_EXP_ONE','parser.py',234),
  ('G_EXP_ONE -> empty','G_EXP_ONE',1,'p_G_EXP_ONE','parser.py',235),
  ('G_EXP_TWO -> LT pushOperador','G_EXP_TWO',2,'p_G_EXP_TWO','parser.py',238),
  ('G_EXP_TWO -> GT pushOperador','G_EXP_TWO',2,'p_G_EXP_TWO','parser.py',239),
  ('G_EXP_TWO -> NE pushOperador','G_EXP_TWO',2,'p_G_EXP_TWO','parser.py',240),
  ('G_EXP_TWO -> EQ pushOperador','G_EXP_TWO',2,'p_G_EXP_TWO','parser.py',241),
  ('G_EXP_TWO -> GTE pushOperador','G_EXP_TWO',2,'p_G_EXP_TWO','parser.py',242),
  ('G_EXP_TWO -> LTE pushOperador','G_EXP_TWO',2,'p_G_EXP_TWO','parser.py',243),
  ('MID_EXP -> TERM plusMinusExp MID_EXP_ONE','MID_EXP',3,'p_MID_EXP','parser.py',246),
  ('MID_EXP_ONE -> PLUS pushOperador MID_EXP','MID_EXP_ONE',3,'p_MID_EXP_ONE','parser.py',249),
  ('MID_EXP_ONE -> MINUS pushOperador MID_EXP','MID_EXP_ONE',3,'p_MID_EXP_ONE','parser.py',250),
  ('MID_EXP_ONE -> empty','MID_EXP_ONE',1,'p_MID_EXP_ONE','parser.py',251),
  ('TERM -> FACT timesDivideExp TERM_ONE','TERM',3,'p_TERM','parser.py',254),
  ('TERM_ONE -> TIMES pushOperador TERM','TERM_ONE',3,'p_TERM_ONE','parser.py',257),
  ('TERM_ONE -> DIVIDE pushOperador TERM','TERM_ONE',3,'p_TERM_ONE','parser.py',258),
  ('TERM_ONE -> empty','TERM_ONE',1,'p_TERM_ONE','parser.py',259),
  ('FACT -> CONST','FACT',1,'p_FACT','parser.py',263),
  ('FACT -> VARIABLE','FACT',1,'p_FACT','parser.py',264),
  ('FACT -> FUNCTION_CALL','FACT',1,'p_FACT','parser.py',265),
  ('FACT -> LPAREN EXP RPAREN','FACT',3,'p_FACT','parser.py',266),
  ('CONST -> CTEI pushInt','CONST',2,'p_CONST','parser.py',269),
  ('CONST -> CTEF pushFloat','CONST',2,'p_CONST','parser.py',270),
  ('CONST -> CTECH pushChar','CONST',2,'p_CONST','parser.py',271),
  ('BLOCK -> LBRACE BLOCK_ONE RBRACE','BLOCK',3,'p_BLOCK','parser.py',278),
  ('BLOCK_ONE -> BLOCK_STMT BLOCK_ONE','BLOCK_ONE',2,'p_BLOCK_ONE','parser.py',281),
  ('BLOCK_ONE -> empty','BLOCK_ONE',1,'p_BLOCK_ONE','parser.py',282),
  ('BLOCK_STMT -> STMT','BLOCK_STMT',1,'p_BLOCK_STMT','parser.py',285),
  ('BLOCK_STMT -> DEC_VAR','BLOCK_STMT',1,'p_BLOCK_STMT','parser.py',286),
  ('STMT -> ASSIGN_OP','STMT',1,'p_STMT','parser.py',289),
  ('STMT -> FUNCTION_CALL','STMT',1,'p_STMT','parser.py',290),
  ('STMT -> READ_FUNC','STMT',1,'p_STMT','parser.py',291),
  ('STMT -> PRINT_FUNC','STMT',1,'p_STMT','parser.py',292),
  ('STMT -> COND','STMT',1,'p_STMT','parser.py',293),
  ('STMT -> WHILE_LOOP','STMT',1,'p_STMT','parser.py',294),
  ('STMT -> RETURN_FUNC','STMT',1,'p_STMT','parser.py',295),
  ('RETURN_FUNC -> RETURN RETURN_F_ONE SEMICOLON','RETURN_FUNC',3,'p_RETURN','parser.py',298),
  ('RETURN_F_ONE -> VARIABLE','RETURN_F_ONE',1,'p_RETURN_F_ONE','parser.py',301),
  ('RETURN_F_ONE -> EXP','RETURN_F_ONE',1,'p_RETURN_F_ONE','parser.py',302),
  ('RETURN_F_ONE -> empty','RETURN_F_ONE',1,'p_RETURN_F_ONE','parser.py',303),
  ('PRINT_FUNC -> PRINT LPAREN EXP RPAREN SEMICOLON','PRINT_FUNC',5,'p_PRINT','parser.py',306),
  ('READ_FUNC -> READ VARIABLE SEMICOLON','READ_FUNC',3,'p_READ_FUNC','parser.py',312),
  ('WHILE_LOOP -> WHILE whilePreExp LPAREN EXP RPAREN whilePostExp NESTED_BLOCK endWhile','WHILE_LOOP',8,'p_WHILE_LOOP','parser.py',315),
  ('COND -> IF LPAREN EXP RPAREN condExp NESTED_BLOCK COND_ONE condEnd','COND',8,'p_COND','parser.py',318),
  ('COND_ONE -> condElse ELSE NESTED_BLOCK','COND_ONE',3,'p_COND_ONE','parser.py',321),
  ('COND_ONE -> empty','COND_ONE',1,'p_COND_ONE','parser.py',322),
  ('NESTED_BLOCK -> LBRACE NESTED_B_ONE RBRACE','NESTED_BLOCK',3,'p_NESTED_BLOCK','parser.py',325),
  ('NESTED_B_ONE -> STMT NESTED_B_ONE','NESTED_B_ONE',2,'p_NESTED_B_ONE','parser.py',328),
  ('NESTED_B_ONE -> empty','NESTED_B_ONE',1,'p_NESTED_B_ONE','parser.py',329),
  ('endProgram -> <empty>','endProgram',0,'p_endProgram','parser.py',337),
  ('addVar -> <empty>','addVar',0,'p_addVar','parser.py',343),
  ('pushOperador -> <empty>','pushOperador',0,'p_pushOperador','parser.py',353),
  ('pushInt -> <empty>','pushInt',0,'p_pushInt','parser.py',358),
  ('pushFloat -> <empty>','pushFloat',0,'p_pushFloat','parser.py',364),
  ('pushChar -> <empty>','pushChar',0,'p_pushChar','parser.py',370),
  ('plusMinusExp -> <empty>','plusMinusExp',0,'p_plusMinusExp','parser.py',392),
  ('timesDivideExp -> <empty>','timesDivideExp',0,'p_timesDivideExp','parser.py',399),
  ('relationalOperation -> <empty>','relationalOperation',0,'p_relationalOperation','parser.py',406),
  ('logicalOrOperation -> <empty>','logicalOrOperation',0,'p_logicalOrOperation','parser.py',413),
  ('logicalAndOperation -> <empty>','logicalAndOperation',0,'p_logicalAndOperation','parser.py',420),
  ('condExp -> <empty>','condExp',0,'p_condExp','parser.py',443),
  ('condElse -> <empty>','condElse',0,'p_condElse','parser.py',447),
  ('condEnd -> <empty>','condEnd',0,'p_condEnd','parser.py',454),
  ('whilePreExp -> <empty>','whilePreExp',0,'p_whilePreExp','parser.py',461),
  ('whilePostExp -> <empty>','whilePostExp',0,'p_whilePostExp','parser.py',465),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','parser.py',469),
  ('addFunc -> <empty>','addFunc',0,'p_addFunc','parser.py',478),
  ('readFunc -> <empty>','readFunc',0,'p_readFunc','parser.py',492),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',508),
]
